// Code generated by fastssz. DO NOT EDIT.
package shared

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the MerkleProof object
func (m *MerkleProof) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MerkleProof object to a target array
func (m *MerkleProof) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Root'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Root)

	// Offset (1) 'ProvenLeaves'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.ProvenLeaves); ii++ {
		offset += 4
		offset += len(m.ProvenLeaves[ii])
	}

	// Offset (2) 'ProofNodes'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(m.ProofNodes); ii++ {
		offset += 4
		offset += len(m.ProofNodes[ii])
	}

	// Field (0) 'Root'
	if len(m.Root) > 512 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, m.Root...)

	// Field (1) 'ProvenLeaves'
	if len(m.ProvenLeaves) > 4096 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(m.ProvenLeaves)
		for ii := 0; ii < len(m.ProvenLeaves); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(m.ProvenLeaves[ii])
		}
	}
	for ii := 0; ii < len(m.ProvenLeaves); ii++ {
		if len(m.ProvenLeaves[ii]) > 4096 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, m.ProvenLeaves[ii]...)
	}

	// Field (2) 'ProofNodes'
	if len(m.ProofNodes) > 4096 {
		err = ssz.ErrListTooBig
		return
	}
	{
		offset = 4 * len(m.ProofNodes)
		for ii := 0; ii < len(m.ProofNodes); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(m.ProofNodes[ii])
		}
	}
	for ii := 0; ii < len(m.ProofNodes); ii++ {
		if len(m.ProofNodes[ii]) > 4096 {
			err = ssz.ErrBytesLength
			return
		}
		dst = append(dst, m.ProofNodes[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the MerkleProof object
func (m *MerkleProof) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'Root'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	// Offset (1) 'ProvenLeaves'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'ProofNodes'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Root'
	{
		buf = tail[o0:o1]
		if len(buf) > 512 {
			return ssz.ErrBytesLength
		}
		if cap(m.Root) == 0 {
			m.Root = make([]byte, 0, len(buf))
		}
		m.Root = append(m.Root, buf...)
	}

	// Field (1) 'ProvenLeaves'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 4096)
		if err != nil {
			return err
		}
		m.ProvenLeaves = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 4096 {
				return ssz.ErrBytesLength
			}
			if cap(m.ProvenLeaves[indx]) == 0 {
				m.ProvenLeaves[indx] = make([]byte, 0, len(buf))
			}
			m.ProvenLeaves[indx] = append(m.ProvenLeaves[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'ProofNodes'
	{
		buf = tail[o2:]
		num, err := ssz.DecodeDynamicLength(buf, 4096)
		if err != nil {
			return err
		}
		m.ProofNodes = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 4096 {
				return ssz.ErrBytesLength
			}
			if cap(m.ProofNodes[indx]) == 0 {
				m.ProofNodes[indx] = make([]byte, 0, len(buf))
			}
			m.ProofNodes[indx] = append(m.ProofNodes[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MerkleProof object
func (m *MerkleProof) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Root'
	size += len(m.Root)

	// Field (1) 'ProvenLeaves'
	for ii := 0; ii < len(m.ProvenLeaves); ii++ {
		size += 4
		size += len(m.ProvenLeaves[ii])
	}

	// Field (2) 'ProofNodes'
	for ii := 0; ii < len(m.ProofNodes); ii++ {
		size += 4
		size += len(m.ProofNodes[ii])
	}

	return
}
